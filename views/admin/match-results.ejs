<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>試合結果管理 - Identity V Match</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="nav-brand">
                <h1><a href="/">Identity V Match</a></h1>
            </div>
            <div class="nav-links">
                <a href="/tournaments">大会一覧</a>
                <a href="/admin" class="active">管理画面</a>
                <a href="/auth/logout">ログアウト</a>
            </div>
        </nav>
    </header>

    <main class="container">
        <div class="page-header">
            <h2>🏆 試合結果管理</h2>
            <p>大会の試合結果を記録・管理します</p>
        </div>

        <div class="match-results-content">
            <!-- Add Match Result Form -->
            <div class="add-result-section card">
                <h3>➕ 新しい試合結果を追加</h3>
                <form action="/admin/match-results" method="POST" class="match-form">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="tournamentId">大会選択</label>
                            <select id="tournamentId" name="tournamentId" required>
                                <option value="">大会を選択してください</option>
                                <% tournaments.forEach(tournament => { %>
                                    <option value="<%= tournament.id %>"><%= tournament.title %></option>
                                <% }); %>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="seriesId">シリーズ選択（オプション）</label>
                            <select id="seriesId" name="seriesId">
                                <option value="">個別試合（シリーズなし）</option>
                                <% activeSeries.forEach(series => { %>
                                    <option value="<%= series.id %>">
                                        <%= series.seriesTitle %> (<%= series.seriesType %>) - 
                                        <%= series.team1Name %> vs <%= series.team2Name %>
                                    </option>
                                <% }); %>
                            </select>
                        </div>
                    </div>

                    <!-- Team Selection Section -->
                    <div class="form-row" id="teamSelectionRow" style="display: none;">
                        <div class="form-group">
                            <label for="hunterTeamSelect">ハンターチーム選択</label>
                            <select id="hunterTeamSelect" name="hunterTeamSelect">
                                <option value="">チームを選択してください</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="survivorTeamSelect">サバイバーチーム選択</label>
                            <select id="survivorTeamSelect" name="survivorTeamSelect">
                                <option value="">チームを選択してください</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="matchTitle">試合名</label>
                            <input type="text" id="matchTitle" name="matchTitle" required 
                                   placeholder="例: 準決勝第1戦 または ゲーム1">
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="hunterPlayer">ハンタープレイヤー</label>
                            <input type="text" id="hunterPlayer" name="hunterPlayer" required 
                                   placeholder="ハンターのプレイヤー名">
                        </div>
                        <div class="form-group">
                            <label for="hunterCharacter">ハンターキャラクター</label>
                            <select id="hunterCharacter" name="hunterCharacter">
                                <option value="">キャラクターを選択（オプション）</option>
                                <% hunterCharacters.forEach(character => { %>
                                    <option value="<%= character.id %>"><%= character.name %></option>
                                <% }); %>
                            </select>
                        </div>
                    </div>

                    <!-- Survivor Players Section -->
                    <div class="survivors-section">
                        <h4>サバイバープレイヤー</h4>
                        <div class="survivor-players">
                            <% for (let i = 1; i <= 4; i++) { %>
                                <div class="survivor-row">
                                    <div class="form-group survivor-name">
                                        <label for="survivorPlayer<%= i %>">プレイヤー<%= i %></label>
                                        <input type="text" id="survivorPlayer<%= i %>" name="survivorPlayer<%= i %>" 
                                               placeholder="プレイヤー名">
                                    </div>
                                    <div class="form-group survivor-character">
                                        <label for="survivorCharacter<%= i %>">キャラクター</label>
                                        <select id="survivorCharacter<%= i %>" name="survivorCharacter<%= i %>">
                                            <option value="">選択してください</option>
                                            <% survivorCharacters.forEach(character => { %>
                                                <option value="<%= character.id %>"><%= character.name %></option>
                                            <% }); %>
                                        </select>
                                    </div>
                                </div>
                            <% } %>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="eliminatedCount">吊り数</label>
                            <select id="eliminatedCount" name="eliminatedCount" required>
                                <option value="0">0人</option>
                                <option value="1">1人</option>
                                <option value="2">2人</option>
                                <option value="3">3人</option>
                                <option value="4">4人</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="escapedCount">逃げ数</label>
                            <select id="escapedCount" name="escapedCount" required>
                                <option value="0">0人</option>
                                <option value="1">1人</option>
                                <option value="2">2人</option>
                                <option value="3">3人</option>
                                <option value="4">4人</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="notes">メモ・備考</label>
                        <textarea id="notes" name="notes" rows="3" 
                                  placeholder="試合に関する追加情報があれば記入してください"></textarea>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary">💾 結果を保存</button>
                        <button type="button" class="btn btn-secondary" onclick="calculatePoints()">📊 ポイント計算確認</button>
                    </div>
                </form>
            </div>

            <!-- Results List -->
            <div class="results-list-section card">
                <h3>📋 試合結果一覧</h3>
                <% if (results.length === 0) { %>
                    <div class="no-results">
                        <p>まだ試合結果が記録されていません。</p>
                    </div>
                <% } else { %>
                    <div class="results-table">
                        <table>
                            <thead>
                                <tr>
                                    <th>試合名</th>
                                    <th>シリーズ</th>
                                    <th>ハンター</th>
                                    <th>サバイバー</th>
                                    <th>結果</th>
                                    <th>ポイント</th>
                                    <th>日時</th>
                                    <th>操作</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% results.forEach(result => { %>
                                    <tr>
                                        <td>
                                            <strong><%= result.matchTitle %></strong>
                                            <% if (result.bonusApplied) { %>
                                                <span class="bonus-badge">ボーナス</span>
                                            <% } %>
                                            <% if (result.gameNumber) { %>
                                                <div class="game-info">ゲーム <%= result.gameNumber %></div>
                                            <% } %>
                                        </td>
                                        <td>
                                            <% if (result.seriesId) { %>
                                                <span class="series-link">
                                                    <a href="/admin/series/<%= result.seriesId %>">シリーズ詳細</a>
                                                </span>
                                            <% } else { %>
                                                <span class="no-series">個別試合</span>
                                            <% } %>
                                        </td>
                                        <td>
                                            <div class="player-info">
                                                <%= result.hunterPlayer %>
                                                <% if (result.hunterCharacter) { %>
                                                    <div class="character-info">(<%= getCharacterName(result.hunterCharacter, 'hunter') %>)</div>
                                                <% } %>
                                            </div>
                                            <% if (result.hunterTeam) { %>
                                                <div class="team-info">(<%= result.hunterTeam === 'team1' ? 'チーム1' : 'チーム2' %>)</div>
                                            <% } %>
                                        </td>
                                        <td>
                                            <div class="survivors-list">
                                                <% if (Array.isArray(result.survivorPlayers)) { %>
                                                    <% result.survivorPlayers.forEach(player => { %>
                                                        <div class="survivor-info">
                                                            <span class="player-name"><%= typeof player === 'object' ? player.name : player %></span>
                                                            <% if (typeof player === 'object' && player.character) { %>
                                                                <span class="character-badge">(<%= getCharacterName(player.character) %>)</span>
                                                            <% } %>
                                                        </div>
                                                    <% }); %>
                                                <% } else if (typeof result.survivorPlayers === 'string') { %>
                                                    <!-- Legacy format support -->
                                                    <% result.survivorPlayers.split(',').forEach(player => { %>
                                                        <div class="survivor-info">
                                                            <span class="player-name"><%= player.trim() %></span>
                                                        </div>
                                                    <% }); %>
                                                <% } %>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="result-score">
                                                <%= result.eliminatedCount %>吊り : <%= result.escapedCount %>逃げ
                                            </span>
                                        </td>
                                        <td>
                                            <span class="points hunter-points"><%= result.hunterPoints %></span>
                                            :
                                            <span class="points survivor-points"><%= result.survivorPoints %></span>
                                        </td>
                                        <td>
                                            <%= result.createdAt?.toDate ? result.createdAt.toDate().toLocaleDateString('ja-JP') : '不明' %>
                                        </td>
                                        <td>
                                            <button class="btn btn-small btn-info" onclick="viewDetails('<%= result.id %>')">詳細</button>
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                <% } %>
            </div>
        </div>

        <% if (typeof query !== 'undefined' && query.success) { %>
            <div class="success-message">
                ✅ 試合結果が正常に保存されました！
            </div>
        <% } %>
    </main>

    <style>
        .match-results-content {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        .add-result-section,
        .results-list-section {
            padding: 2rem;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 1rem;
        }
        
        #teamSelectionRow {
            background: rgba(52, 152, 219, 0.1);
            padding: 1rem;
            border-radius: 8px;
            border: 2px solid rgba(52, 152, 219, 0.3);
        }
        
        #teamSelectionRow .form-group label {
            color: #3498db;
            font-weight: bold;
        }
        
        #teamSelectionRow select {
            border-color: #3498db;
        }
        
        #teamSelectionRow select:focus {
            border-color: #2980b9;
            box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
        }

        .results-table {
            overflow-x: auto;
        }

        .results-table table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .results-table th,
        .results-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        .results-table th {
            background: rgba(255, 255, 255, 0.1);
            font-weight: 600;
            color: var(--primary-color);
        }

        .result-score {
            font-weight: 600;
            color: var(--accent-color);
        }

        .points {
            display: inline-block;
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
            font-weight: 700;
            font-size: 0.9rem;
        }

        .hunter-points {
            background: var(--error-color);
            color: white;
        }

        .survivor-points {
            background: var(--primary-color);
            color: white;
        }

        .bonus-badge {
            display: inline-block;
            padding: 0.2rem 0.5rem;
            background: var(--warning-color);
            color: var(--background-dark);
            font-size: 0.7rem;
            font-weight: 600;
            border-radius: 4px;
            margin-left: 0.5rem;
        }

        .no-results {
            text-align: center;
            padding: 2rem;
            color: var(--text-secondary);
        }

        .btn-small {
            padding: 0.4rem 0.8rem;
            font-size: 0.8rem;
        }

        .btn-info {
            background: var(--secondary-color);
            color: white;
        }

        .btn-info:hover {
            background: var(--secondary-dark);
        }

        .game-info {
            font-size: 0.8rem;
            color: var(--text-secondary);
            font-style: italic;
        }

        .team-info {
            font-size: 0.8rem;
            color: var(--text-secondary);
            font-style: italic;
        }

        .series-link a {
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 600;
        }

        .series-link a:hover {
            text-decoration: underline;
        }

        .no-series {
            color: var(--text-secondary);
            font-style: italic;
        }

        .survivors-section {
            margin: 1.5rem 0;
            padding: 1rem;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.05);
        }

        .survivors-section h4 {
            margin: 0 0 1rem 0;
            color: var(--primary-color);
            font-size: 1.1rem;
        }

        .survivor-players {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .survivors-list {
            display: flex;
            flex-direction: column;
            gap: 0.3rem;
        }

        .survivor-info {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

        .player-name {
            font-weight: 600;
        }

        .character-badge {
            background: var(--secondary-color);
            color: white;
            padding: 0.1rem 0.4rem;
            border-radius: 4px;
            font-size: 0.7rem;
            font-weight: 500;
        }

        .character-info {
            font-size: 0.8rem;
            color: var(--primary-color);
            font-style: italic;
            font-weight: 500;
        }

        .player-info {
            display: flex;
            flex-direction: column;
            gap: 0.2rem;
        }

        .survivor-row {
            display: grid;
            grid-template-columns: 2fr 3fr;
            gap: 1rem;
            align-items: end;
        }

        .survivor-name input,
        .survivor-character select {
            width: 100%;
        }

        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .survivor-row {
                grid-template-columns: 1fr;
            }
        }
    </style>

    <script>
        // Dynamic team selection functionality
        let tournamentTeams = [];
        
        // Event listener for tournament selection
        document.getElementById('tournamentId').addEventListener('change', async function() {
            const tournamentId = this.value;
            const teamSelectionRow = document.getElementById('teamSelectionRow');
            const hunterTeamSelect = document.getElementById('hunterTeamSelect');
            const survivorTeamSelect = document.getElementById('survivorTeamSelect');
            
            if (tournamentId) {
                try {
                    // Fetch teams for selected tournament
                    const response = await fetch(`/api/tournaments/${tournamentId}/teams`);
                    const result = await response.json();
                    
                    if (response.ok && result.teams) {
                        tournamentTeams = result.teams;
                        
                        // Clear and populate team dropdowns
                        hunterTeamSelect.innerHTML = '<option value="">チームを選択してください</option>';
                        survivorTeamSelect.innerHTML = '<option value="">チームを選択してください</option>';
                        
                        result.teams.forEach(team => {
                            const option1 = new Option(`${team.name} (${team.members.length}人)`, team.id);
                            const option2 = new Option(`${team.name} (${team.members.length}人)`, team.id);
                            hunterTeamSelect.add(option1);
                            survivorTeamSelect.add(option2);
                        });
                        
                        // Show team selection if teams exist
                        if (result.teams.length > 0) {
                            teamSelectionRow.style.display = 'flex';
                        } else {
                            teamSelectionRow.style.display = 'none';
                        }
                    }
                } catch (error) {
                    console.error('Error fetching teams:', error);
                    teamSelectionRow.style.display = 'none';
                }
            } else {
                teamSelectionRow.style.display = 'none';
                tournamentTeams = [];
            }
            
            // Clear player selections when tournament changes
            clearPlayerSelections();
        });
        
        // Event listener for hunter team selection
        document.getElementById('hunterTeamSelect').addEventListener('change', function() {
            const teamId = this.value;
            if (teamId) {
                populatePlayerDropdown('hunterPlayer', teamId, 'hunter');
            } else {
                clearPlayerDropdown('hunterPlayer');
            }
        });
        
        // Event listener for survivor team selection
        document.getElementById('survivorTeamSelect').addEventListener('change', function() {
            const teamId = this.value;
            if (teamId) {
                populateSurvivorDropdowns(teamId);
            } else {
                clearSurvivorDropdowns();
            }
        });
        
        // Event listener for series selection to auto-generate match title
        document.getElementById('seriesId').addEventListener('change', function() {
            const seriesId = this.value;
            const matchTitle = document.getElementById('matchTitle');
            
            if (seriesId) {
                // Auto-generate match title based on existing games in series
                generateSeriesMatchTitle(seriesId);
                matchTitle.readOnly = true;
                matchTitle.style.backgroundColor = '#f8f9fa';
            } else {
                matchTitle.readOnly = false;
                matchTitle.style.backgroundColor = '';
                matchTitle.value = '';
            }
        });
        
        async function generateSeriesMatchTitle(seriesId) {
            try {
                // Get series data to determine current game number
                const response = await fetch(`/admin/series/${seriesId}`);
                if (response.ok) {
                    // For now, we'll use a simple counter. In a real implementation,
                    // we'd parse the series data to determine the next game number
                    const gameNumber = Math.floor(Math.random() * 3) + 1; // Placeholder
                    document.getElementById('matchTitle').value = `${gameNumber}回戦`;
                }
            } catch (error) {
                console.error('Error generating match title:', error);
            }
        }
        
        function populatePlayerDropdown(fieldId, teamId, role) {
            const team = tournamentTeams.find(t => t.id === teamId);
            if (!team) return;
            
            const field = document.getElementById(fieldId);
            const fieldContainer = field.parentElement;
            
            // Replace text input with dropdown
            const dropdown = document.createElement('select');
            dropdown.id = fieldId;
            dropdown.name = fieldId;
            dropdown.required = true;
            dropdown.innerHTML = '<option value="">プレイヤーを選択してください</option>';
            
            team.members.forEach(member => {
                const option = new Option(
                    `${member.username} (H:${member.hunterRank}段 S:${member.survivorRank}段)`,
                    member.username
                );
                dropdown.add(option);
            });
            
            fieldContainer.replaceChild(dropdown, field);
        }
        
        function populateSurvivorDropdowns(teamId) {
            const team = tournamentTeams.find(t => t.id === teamId);
            if (!team) return;
            
            for (let i = 1; i <= 4; i++) {
                const fieldId = `survivorPlayer${i}`;
                const field = document.getElementById(fieldId);
                const fieldContainer = field.parentElement;
                
                // Replace text input with dropdown
                const dropdown = document.createElement('select');
                dropdown.id = fieldId;
                dropdown.name = fieldId;
                dropdown.innerHTML = '<option value="">プレイヤーを選択してください</option>';
                
                team.members.forEach(member => {
                    const option = new Option(
                        `${member.username} (H:${member.hunterRank}段 S:${member.survivorRank}段)`,
                        member.username
                    );
                    dropdown.add(option);
                });
                
                fieldContainer.replaceChild(dropdown, field);
            }
        }
        
        function clearPlayerSelections() {
            // Clear hunter player
            clearPlayerDropdown('hunterPlayer');
            // Clear survivor players
            clearSurvivorDropdowns();
        }
        
        function clearPlayerDropdown(fieldId) {
            const field = document.getElementById(fieldId);
            if (field && field.tagName === 'SELECT') {
                const fieldContainer = field.parentElement;
                const textInput = document.createElement('input');
                textInput.type = 'text';
                textInput.id = fieldId;
                textInput.name = fieldId;
                textInput.required = true;
                textInput.placeholder = fieldId === 'hunterPlayer' ? 'ハンターのプレイヤー名' : 'プレイヤー名';
                
                fieldContainer.replaceChild(textInput, field);
            }
        }
        
        function clearSurvivorDropdowns() {
            for (let i = 1; i <= 4; i++) {
                const fieldId = `survivorPlayer${i}`;
                const field = document.getElementById(fieldId);
                if (field && field.tagName === 'SELECT') {
                    const fieldContainer = field.parentElement;
                    const textInput = document.createElement('input');
                    textInput.type = 'text';
                    textInput.id = fieldId;
                    textInput.name = fieldId;
                    textInput.placeholder = 'プレイヤー名';
                    
                    fieldContainer.replaceChild(textInput, field);
                }
            }
        }
        
        function calculatePoints() {
            const eliminated = parseInt(document.getElementById('eliminatedCount').value) || 0;
            const escaped = parseInt(document.getElementById('escapedCount').value) || 0;
            
            if (eliminated + escaped !== 4) {
                alert('吊り数と逃げ数の合計が4になるようにしてください。');
                return;
            }
            
            let hunterPoints = eliminated;
            let survivorPoints = escaped;
            let bonusMessage = '';
            
            // Check if bonus scoring would apply (this is a client-side approximation)
            if (eliminated === 4) {
                bonusMessage = '\n\n⚠️ 4吊りの場合、ボーナススコアリングが有効だとハンターポイントが5ポイントになります。';
            }
            
            alert(`ポイント計算結果:\nハンター: ${hunterPoints}ポイント\nサバイバー: ${survivorPoints}ポイント${bonusMessage}`);
        }
        
        function viewDetails(resultId) {
            // This would open a modal or navigate to a detail page
            alert('詳細表示機能は今後実装予定です。ID: ' + resultId);
        }
        
        // Auto-calculate escaped count when eliminated count changes
        document.getElementById('eliminatedCount').addEventListener('change', function() {
            const eliminated = parseInt(this.value) || 0;
            const escaped = 4 - eliminated;
            document.getElementById('escapedCount').value = escaped;
        });
    </script>
</body>
</html>