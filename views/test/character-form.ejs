<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>キャラクター追跡テスト - Identity V Match</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="/js/main.js"></script>
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="nav-brand">
                <h1><a href="/">Identity V Match</a></h1>
            </div>
            <div class="nav-links">
                <a href="/test/character-form" class="active">キャラクターテスト</a>
                <a href="/test/results">結果表示</a>
            </div>
        </nav>
    </header>

    <main class="container">
        <div class="page-header">
            <h2>🧪 キャラクター追跡機能テスト</h2>
            <p>プレイヤーとキャラクターを関連付ける機能のテストページです</p>
        </div>

        <div class="match-results-content">
            <!-- Add Match Result Form -->
            <div class="add-result-section card">
                <h3>➕ 新しい試合結果を追加（キャラクター付き）</h3>
                <form action="/test/match-results" method="POST" class="match-form">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="tournamentId">大会選択</label>
                            <select id="tournamentId" name="tournamentId" required onchange="loadTournamentTeams()">
                                <option value="">大会を選択してください</option>
                                <% tournaments.forEach(tournament => { %>
                                    <option value="<%= tournament.id %>"><%= tournament.title %></option>
                                <% }); %>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="seriesId">シリーズ選択（オプション）</label>
                            <select id="seriesId" name="seriesId">
                                <option value="">個別試合（シリーズなし）</option>
                                <% activeSeries.forEach(series => { %>
                                    <option value="<%= series.id %>">
                                        <%= series.seriesTitle %> (<%= series.seriesType %>) - 
                                        <%= series.team1Name %> vs <%= series.team2Name %>
                                    </option>
                                <% }); %>
                            </select>
                        </div>
                    </div>

                    <!-- Team Selection Section -->
                    <div class="form-row team-selection-section" style="display: none;">
                        <div class="form-group">
                            <label for="hunterTeamSelect">ハンターチーム選択</label>
                            <select id="hunterTeamSelect" name="hunterTeamSelect" onchange="loadTeamMembers('hunter')">
                                <option value="">チームを選択してください</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="survivorTeamSelect">サバイバーチーム選択</label>
                            <select id="survivorTeamSelect" name="survivorTeamSelect" onchange="loadTeamMembers('survivor')">
                                <option value="">チームを選択してください</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="matchTitle">試合名</label>
                            <input type="text" id="matchTitle" name="matchTitle" required 
                                   placeholder="例: テスト試合1">
                        </div>
                        <div class="form-group">
                            <label for="hunterTeam">ハンターのチーム（シリーズの場合）</label>
                            <select id="hunterTeam" name="hunterTeam">
                                <option value="">選択してください</option>
                                <option value="team1">チーム1</option>
                                <option value="team2">チーム2</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="hunterPlayer">ハンタープレイヤー</label>
                            <div class="hunter-mode-toggle">
                                <label for="hunterModeSelect">入力モード:</label>
                                <select id="hunterModeSelect" onchange="toggleHunterMode()">
                                    <option value="manual">手動入力</option>
                                    <option value="team">チームから選択</option>
                                </select>
                            </div>
                            <select id="hunterPlayer" name="hunterPlayer" required style="display: none;">
                                <option value="">チームメンバーを選択してください</option>
                            </select>
                            <input type="text" id="hunterPlayerInput" name="hunterPlayerInput" required 
                                   placeholder="ハンターのプレイヤー名" style="display: block;">
                        </div>
                        <div class="form-group">
                            <label for="hunterCharacter">ハンターキャラクター</label>
                            <select id="hunterCharacter" name="hunterCharacter">
                                <option value="">キャラクターを選択（オプション）</option>
                                <% hunterCharacters.forEach(character => { %>
                                    <option value="<%= character.id %>"><%= character.name %></option>
                                <% }); %>
                            </select>
                        </div>
                    </div>

                    <!-- Survivor Players Section -->
                    <div class="survivors-section">
                        <h4>サバイバープレイヤー</h4>
                        <div class="survivor-mode-toggle">
                            <label for="survivorModeSelect">入力モード:</label>
                            <select id="survivorModeSelect" onchange="toggleSurvivorMode()">
                                <option value="manual">手動入力</option>
                                <option value="team">チームから選択</option>
                            </select>
                        </div>
                        <div class="survivor-players">
                            <% for (let i = 1; i <= 4; i++) { %>
                                <div class="survivor-row">
                                    <div class="form-group survivor-name">
                                        <label for="survivorPlayer<%= i %>">プレイヤー<%= i %></label>
                                        <select id="survivorPlayerSelect<%= i %>" name="survivorPlayerSelect<%= i %>" 
                                               style="display: none;" onchange="updateSurvivorInput(<%= i %>)">
                                            <option value="">選択してください</option>
                                        </select>
                                        <input type="text" id="survivorPlayer<%= i %>" name="survivorPlayer<%= i %>" 
                                               placeholder="プレイヤー名" style="display: block;">
                                    </div>
                                    <div class="form-group survivor-character">
                                        <label for="survivorCharacter<%= i %>">キャラクター</label>
                                        <select id="survivorCharacter<%= i %>" name="survivorCharacter<%= i %>">
                                            <option value="">選択してください</option>
                                            <% survivorCharacters.forEach(character => { %>
                                                <option value="<%= character.id %>"><%= character.name %></option>
                                            <% }); %>
                                        </select>
                                    </div>
                                </div>
                            <% } %>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="eliminatedCount">吊り数</label>
                            <select id="eliminatedCount" name="eliminatedCount" required>
                                <option value="0">0人</option>
                                <option value="1">1人</option>
                                <option value="2">2人</option>
                                <option value="3">3人</option>
                                <option value="4">4人</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="escapedCount">逃げ数</label>
                            <select id="escapedCount" name="escapedCount" required>
                                <option value="0">0人</option>
                                <option value="1">1人</option>
                                <option value="2">2人</option>
                                <option value="3">3人</option>
                                <option value="4">4人</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="notes">メモ・備考</label>
                        <textarea id="notes" name="notes" rows="3" 
                                  placeholder="試合に関する追加情報があれば記入してください"></textarea>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary">💾 結果を保存</button>
                        <button type="button" class="btn btn-secondary" onclick="calculatePoints()">📊 ポイント計算確認</button>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <style>
        .match-results-content {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        .add-result-section {
            padding: 2rem;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .survivors-section {
            margin: 1.5rem 0;
            padding: 1rem;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.05);
        }

        .survivors-section h4 {
            margin: 0 0 1rem 0;
            color: var(--primary-color);
            font-size: 1.1rem;
        }

        .survivor-players {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .survivor-row {
            display: grid;
            grid-template-columns: 2fr 3fr;
            gap: 1rem;
            align-items: end;
        }

        .survivor-name input,
        .survivor-character select,
        .survivor-name select {
            width: 100%;
        }

        .team-selection-section {
            background: rgba(0, 123, 255, 0.1);
            border: 1px solid var(--primary-color);
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
        }

        .survivor-mode-toggle {
            margin-bottom: 1rem;
            padding: 0.5rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 4px;
        }

        .survivor-mode-toggle label {
            margin-right: 0.5rem;
            font-weight: bold;
        }

        .survivor-mode-toggle select {
            padding: 0.25rem;
            border-radius: 4px;
        }

        .hunter-mode-toggle {
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 4px;
        }

        .hunter-mode-toggle label {
            margin-right: 0.5rem;
            font-weight: bold;
        }

        .hunter-mode-toggle select {
            padding: 0.25rem;
            border-radius: 4px;
        }

        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .survivor-row {
                grid-template-columns: 1fr;
            }
        }
    </style>

    <script>
        function calculatePoints() {
            const eliminated = parseInt(document.getElementById('eliminatedCount').value) || 0;
            const escaped = parseInt(document.getElementById('escapedCount').value) || 0;
            
            if (eliminated + escaped !== 4) {
                showCustomAlert('吊り数と逃げ数の合計が4になるようにしてください。', 'warning');
                return;
            }
            
            let hunterPoints = eliminated;
            let survivorPoints = escaped;
            
            showCustomAlert(`ポイント計算結果:\nハンター: ${hunterPoints}ポイント\nサバイバー: ${survivorPoints}ポイント`, 'info', 'ポイント計算結果');
        }
        
        // Auto-calculate escaped count when eliminated count changes
        document.getElementById('eliminatedCount').addEventListener('change', function() {
            const eliminated = parseInt(this.value) || 0;
            const escaped = 4 - eliminated;
            document.getElementById('escapedCount').value = escaped;
        });
        
        // Global variables to store teams and their members
        let tournamentTeams = [];
        
        // Load teams when tournament is selected
        async function loadTournamentTeams() {
            const tournamentId = document.getElementById('tournamentId').value;
            const teamSelectionSection = document.querySelector('.team-selection-section');
            
            if (!tournamentId) {
                teamSelectionSection.style.display = 'none';
                return;
            }
            
            try {
                const response = await fetch(`/admin/api/tournaments/${tournamentId}/teams`);
                const data = await response.json();
                
                if (data.teams && data.teams.length > 0) {
                    tournamentTeams = data.teams;
                    populateTeamSelectors();
                    teamSelectionSection.style.display = 'block';
                } else {
                    teamSelectionSection.style.display = 'none';
                    // Reset to manual input mode
                    toggleToManualMode();
                }
            } catch (error) {
                console.error('Error loading teams:', error);
                teamSelectionSection.style.display = 'none';
                toggleToManualMode();
            }
        }
        
        // Populate team selector dropdowns
        function populateTeamSelectors() {
            const hunterTeamSelect = document.getElementById('hunterTeamSelect');
            const survivorTeamSelect = document.getElementById('survivorTeamSelect');
            
            // Clear existing options
            hunterTeamSelect.innerHTML = '<option value="">チームを選択してください</option>';
            survivorTeamSelect.innerHTML = '<option value="">チームを選択してください</option>';
            
            // Add team options
            tournamentTeams.forEach(team => {
                const option1 = new Option(team.name, team.id);
                const option2 = new Option(team.name, team.id);
                hunterTeamSelect.add(option1);
                survivorTeamSelect.add(option2);
            });
        }
        
        // Load team members when a team is selected
        function loadTeamMembers(role) {
            const teamSelectId = role === 'hunter' ? 'hunterTeamSelect' : 'survivorTeamSelect';
            const teamId = document.getElementById(teamSelectId).value;
            
            if (!teamId) {
                if (role === 'hunter') {
                    document.getElementById('hunterModeSelect').value = 'manual';
                    toggleHunterMode();
                } else {
                    // For survivors, reset to manual mode
                    document.getElementById('survivorModeSelect').value = 'manual';
                    toggleSurvivorMode();
                }
                return;
            }
            
            const selectedTeam = tournamentTeams.find(team => team.id === teamId);
            if (!selectedTeam || !selectedTeam.members) {
                return;
            }
            
            if (role === 'hunter') {
                populateHunterMembers(selectedTeam.members);
            } else {
                populateSurvivorMembers(selectedTeam.members);
            }
        }
        
        // Populate hunter member dropdown
        function populateHunterMembers(members) {
            const hunterPlayerSelect = document.getElementById('hunterPlayer');
            hunterPlayerSelect.innerHTML = '<option value="">チームメンバーを選択してください</option>';
            
            members.forEach(member => {
                const option = new Option(member.username, member.username);
                hunterPlayerSelect.add(option);
            });
            
            // Switch to team selection mode
            document.getElementById('hunterModeSelect').value = 'team';
            toggleHunterMode();
        }
        
        // Populate survivor member dropdowns
        function populateSurvivorMembers(members) {
            for (let i = 1; i <= 4; i++) {
                const selectElement = document.getElementById(`survivorPlayerSelect${i}`);
                selectElement.innerHTML = '<option value="">選択してください</option>';
                
                members.forEach(member => {
                    const option = new Option(member.username, member.username);
                    selectElement.add(option);
                });
            }
            
            // Switch to team selection mode
            document.getElementById('survivorModeSelect').value = 'team';
            toggleSurvivorMode();
        }
        
        // Toggle hunter input mode between manual and team selection
        function toggleHunterMode() {
            const mode = document.getElementById('hunterModeSelect').value;
            const playerSelect = document.getElementById('hunterPlayer');
            const playerInput = document.getElementById('hunterPlayerInput');
            
            if (mode === 'team') {
                playerSelect.style.display = 'block';
                playerInput.style.display = 'none';
                playerInput.removeAttribute('required');
                playerSelect.setAttribute('required', 'required');
                
                // Load team members if a team is already selected
                const hunterTeamId = document.getElementById('hunterTeamSelect').value;
                if (hunterTeamId) {
                    loadTeamMembers('hunter');
                }
            } else {
                playerSelect.style.display = 'none';
                playerInput.style.display = 'block';
                playerSelect.removeAttribute('required');
                playerInput.setAttribute('required', 'required');
                // Clear selection
                playerSelect.value = '';
                playerInput.value = '';
            }
        }
        
        // Toggle survivor input mode
        function toggleSurvivorMode() {
            const mode = document.getElementById('survivorModeSelect').value;
            
            for (let i = 1; i <= 4; i++) {
                const selectElement = document.getElementById(`survivorPlayerSelect${i}`);
                const inputElement = document.getElementById(`survivorPlayer${i}`);
                
                if (mode === 'team') {
                    selectElement.style.display = 'block';
                    inputElement.style.display = 'none';
                } else {
                    selectElement.style.display = 'none';
                    inputElement.style.display = 'block';
                    // Clear selection
                    selectElement.value = '';
                }
            }
        }
        
        // Update survivor input when team member is selected
        function updateSurvivorInput(playerNumber) {
            const selectElement = document.getElementById(`survivorPlayerSelect${playerNumber}`);
            const inputElement = document.getElementById(`survivorPlayer${playerNumber}`);
            inputElement.value = selectElement.value;
        }
        
        // Reset to manual mode when no teams are available
        function toggleToManualMode() {
            document.getElementById('hunterModeSelect').value = 'manual';
            toggleHunterMode();
            document.getElementById('survivorModeSelect').value = 'manual';
            toggleSurvivorMode();
        }
        
        // Handle form submission
        document.querySelector('.match-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Sync selected team members to the input fields before submission
            syncFormData();
            
            try {
                const response = await fetch('/test/match-results', {
                    method: 'POST',
                    body: new FormData(this)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showCustomAlert('試合結果が保存されました！\n\n結果表示ページで確認できます。', 'success');
                    // Reset form
                    this.reset();
                    // Reset team selection
                    document.querySelector('.team-selection-section').style.display = 'none';
                    toggleToManualMode();
                } else {
                    showCustomAlert('エラー: ' + result.error, 'error');
                }
            } catch (error) {
                showCustomAlert('保存中にエラーが発生しました: ' + error.message, 'error');
            }
        });
        
        // Sync team selection data to input fields for form submission
        function syncFormData() {
            // Sync hunter player
            const hunterPlayerSelect = document.getElementById('hunterPlayer');
            const hunterPlayerInput = document.getElementById('hunterPlayerInput');
            if (hunterPlayerSelect.style.display !== 'none' && hunterPlayerSelect.value) {
                hunterPlayerInput.value = hunterPlayerSelect.value;
            }
            
            // Sync survivor players
            const survivorMode = document.getElementById('survivorModeSelect').value;
            if (survivorMode === 'team') {
                for (let i = 1; i <= 4; i++) {
                    const selectElement = document.getElementById(`survivorPlayerSelect${i}`);
                    const inputElement = document.getElementById(`survivorPlayer${i}`);
                    if (selectElement.value) {
                        inputElement.value = selectElement.value;
                    }
                }
            }
        }
    </script>
</body>
</html>